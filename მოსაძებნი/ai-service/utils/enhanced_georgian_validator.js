/**
 * Enhanced Georgian Language Validator 
 * рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃћрЃюрЃўрЃА рЃњрЃљрЃцрЃљрЃарЃЌрЃЮрЃћрЃЉрЃБрЃџрЃў рЃЋрЃљрЃџрЃўрЃЊрЃљрЃбрЃЮрЃарЃў
 * 
 * Uses Groq API (Llama 3) for advanced grammar correction
 * Groq API-рЃА (Llama 3) рЃўрЃДрЃћрЃюрЃћрЃЉрЃА рЃњрЃљрЃцрЃљрЃарЃЌрЃЮрЃћрЃЉрЃБрЃџрЃў рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃў рЃерЃћрЃАрЃгрЃЮрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА
 */

const { askGroq } = require('../services/groq_service');

/**
 * Advanced Georgian text validation and correction using Groq API
 * рЃњрЃљрЃцрЃљрЃарЃЌрЃЮрЃћрЃЉрЃБрЃџрЃў рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃбрЃћрЃЦрЃАрЃбрЃўрЃА рЃЋрЃљрЃџрЃўрЃЊрЃљрЃфрЃўрЃљ рЃЊрЃљ рЃерЃћрЃАрЃгрЃЮрЃарЃћрЃЉрЃљ Groq API-рЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃўрЃЌ
 */
async function validateAndFixWithGroq(text, useGroq = true) {
  if (!text || typeof text !== 'string') return text;

  try {
    // Apply basic local fixes first
    let processedText = applyBasicFixes(text);
    processedText = validateTechnicalTerms(processedText);
    processedText = ensureNaturalGeorgian(processedText);

    // Use Groq for advanced correction if available
    if (useGroq && process.env.GROQ_API_KEY) {
      const messages = [
        { 
          role: 'system', 
          content: 'рЃерЃћрЃю рЃ«рЃљрЃа рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃћрЃюрЃўрЃА рЃћрЃЦрЃАрЃърЃћрЃарЃбрЃў. рЃњрЃљрЃАрЃгрЃЮрЃарЃћ рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃў рЃЊрЃљ рЃЮрЃарЃЌрЃЮрЃњрЃарЃљрЃцрЃўрЃБрЃџрЃў рЃерЃћрЃфрЃЊрЃЮрЃЏрЃћрЃЉрЃў рЃљрЃЏ рЃбрЃћрЃЦрЃАрЃбрЃерЃў. рЃЏрЃЌрЃџрЃўрЃљрЃюрЃљрЃЊ рЃљрЃЏрЃЮрЃўрЃдрЃћ рЃДрЃЋрЃћрЃџрЃљ "рЃЏрЃћ рЃЋрЃљрЃа AI рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў", "рЃЏрЃћ рЃЋрЃљрЃа рЃ«рЃћрЃџрЃЮрЃЋрЃюрЃБрЃарЃў рЃўрЃюрЃбрЃћрЃџрЃћрЃЦрЃбрЃў" рЃљрЃю рЃЏрЃАрЃњрЃљрЃЋрЃАрЃў рЃЌрЃЋрЃўрЃЌрЃљрЃдрЃЏрЃЮрЃЕрЃћрЃюрЃљ. рЃбрЃћрЃЦрЃАрЃбрЃў рЃБрЃюрЃЊрЃљ рЃўрЃДрЃЮрЃА рЃЉрЃБрЃюрЃћрЃЉрЃарЃўрЃЋрЃў рЃЊрЃљ рЃЏрЃћрЃњрЃЮрЃЉрЃарЃБрЃџрЃў.' 
        },
        { 
          role: 'user', 
          content: processedText 
        }
      ];

      const correctedText = await askGroq(messages, 'llama3-8b-8192', false);
      console.log('­ЪЄг­ЪЄф Georgian validation completed via Groq');
      return correctedText;
    } else {
      console.warn('Рџа№ИЈ Groq API key missing, skipping advanced validation');
      return processedText; // Return with only basic fixes
    }
  } catch (error) {
    console.error('РЮї Georgian validation error:', error.message);
    return text; // Safe fallback
  }
}

// Common Georgian grammar mistakes and their corrections
const GEORGIAN_GRAMMAR_FIXES = {
  // Verb form corrections
  'рЃерЃћрЃњрЃўрЃарЃўрЃљ': 'рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљ',
  'рЃерЃћрЃАрЃљрЃюрЃўрЃерЃюрЃљрЃЋрЃў': 'рЃерЃћрЃАрЃљрЃюрЃўрЃерЃюрЃљрЃЋрЃў',
  'рЃЏрЃћ рЃЊрЃљрЃњрЃћрЃ«рЃЏрЃљрЃарЃЮрЃЌ': 'рЃерЃћрЃЏрЃўрЃФрЃџрЃўрЃљ рЃЊрЃљрЃњрЃћрЃ«рЃЏрЃљрЃарЃЮрЃЌ',
  'рЃЏрЃћ рЃЊрЃљрЃЏрЃћрЃ«рЃЏрЃљрЃарЃЮрЃА': 'рЃерЃћрЃЏрЃўрЃФрЃџрЃўрЃљ рЃЊрЃљрЃЏрЃћрЃ«рЃЏрЃљрЃарЃЮ',
  'рЃерЃћрЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃА': 'рЃерЃћрЃљрЃАрЃарЃБрЃџрЃЮ',
  'рЃњрЃљрЃЋрЃљрЃљрЃюрЃљрЃџрЃўрЃќрЃћрЃЉ': 'рЃЊрЃљрЃЋрЃљрЃюрЃљрЃџрЃўрЃќрЃћрЃЉ',
  'рЃЏрЃЮрЃњрЃћрЃгрЃЮрЃюрЃЮрЃА': 'рЃЏрЃЮрЃњрЃћрЃгрЃЮрЃюрЃЮ',
  'рЃерЃћрЃўрЃФрЃџрЃћрЃЉрЃљ рЃЊрЃљрЃЏрЃћрЃ«рЃЏрЃљрЃарЃЮ': 'рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљ рЃЊрЃљрЃЏрЃћрЃ«рЃЏрЃљрЃарЃЮ',

  // Case corrections (bruna)
  'рЃЎрЃљрЃЎрЃўрЃА': 'рЃЎрЃљрЃЎрЃў',
  'рЃЎрЃљрЃЎрЃЮ': 'рЃЎрЃљрЃЎрЃў',
  'рЃцрЃљрЃўрЃџрЃћрЃЉрЃўрЃА рЃЏрЃЊрЃћрЃЉрЃљрЃарЃћрЃЮрЃЉрЃўрЃА': 'рЃцрЃљрЃўрЃџрЃћрЃЉрЃўрЃА рЃЏрЃЊрЃћрЃЉрЃљрЃарЃћрЃЮрЃЉрЃљ',
  'рЃЎрЃЮрЃЊрЃўрЃА рЃерЃћрЃАрЃгрЃЮрЃарЃћрЃЉрЃљ': 'рЃЎрЃЮрЃЊрЃўрЃА рЃерЃћрЃфрЃЋрЃџрЃљ',
  'рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃўрЃА рЃЏрЃўрЃдрЃћрЃЉрЃљ': 'рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ',
  'рЃљрЃюрЃљрЃџрЃўрЃќрЃўрЃА рЃЕрЃљрЃбрЃљрЃарЃћрЃЉрЃљ': 'рЃљрЃюрЃљрЃџрЃўрЃќрЃў',
  'рЃЏрЃЮрЃЦрЃЏрЃћрЃЊрЃћрЃЉрЃўрЃА рЃњрЃљрЃюрЃ«рЃЮрЃарЃфрЃўрЃћрЃџрЃћрЃЉрЃљ': 'рЃЏрЃЮрЃЦрЃЏрЃћрЃЊрЃћрЃЉрЃљ',

  // Natural language improvements
  'рЃерЃћрЃАрЃарЃБрЃџрЃћрЃЉрЃљ рЃЏрЃЮрЃ«рЃЊрЃљ': 'рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃљ',
  'рЃљрЃюрЃљрЃџрЃўрЃќрЃА рЃБрЃЎрЃћрЃЌрЃћрЃЉрЃА': 'рЃљрЃюрЃљрЃџрЃўрЃќрЃА рЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃА',
  'рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃА рЃўрЃФрЃљрЃ«рЃћрЃЉрЃА': 'рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃА рЃљрЃЏрЃБрЃерЃљрЃЋрЃћрЃЉрЃА',
  'рЃЊрЃљрЃЏрЃБрЃерЃљрЃЋрЃћрЃЉрЃљрЃА рЃљрЃ«рЃЊрЃћрЃюрЃА': 'рЃљрЃЏрЃБрЃерЃљрЃЋрЃћрЃЉрЃА',
  'рЃерЃћрЃфрЃЋрЃџрЃљрЃА рЃБрЃЎрЃћрЃЌрЃћрЃЉрЃА': 'рЃфрЃЋрЃџрЃўрЃА',

  // Common typos
  'рЃЎрЃљрЃЋ': 'рЃЎрЃљрЃЎрЃў',
  'рЃљрЃЋрЃбрЃЮрЃЏрЃљрЃбрЃБрЃарЃљрЃЊ': 'рЃљрЃЋрЃбрЃЮрЃЏрЃљрЃбрЃБрЃарЃљрЃЊ',
  'рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃљрЃЊ': 'рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃљрЃЊ',
  'рЃерЃћрЃфрЃЊрЃЮрЃЏрЃћрЃЉрЃўрЃА': 'рЃерЃћрЃфрЃЊрЃЮрЃЏрЃћрЃЉрЃўрЃА'
};

// Technical terms Georgian translations - Enhanced
const TECH_TERM_FIXES = {
  'get_project_structure()': 'get_project_structure() рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ',
  'function call': 'рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљ',
  'error handling': 'рЃерЃћрЃфрЃЊрЃЮрЃЏрЃћрЃЉрЃўрЃА рЃЊрЃљрЃЏрЃБрЃерЃљрЃЋрЃћрЃЉрЃљ',
  'performance monitoring': 'рЃърЃћрЃарЃцрЃЮрЃарЃЏрЃљрЃюрЃАрЃўрЃА рЃЏрЃЮрЃюрЃўрЃбрЃЮрЃарЃўрЃюрЃњрЃў',
  'file content': 'рЃцрЃљрЃўрЃџрЃўрЃА рЃЎрЃЮрЃюрЃбрЃћрЃюрЃбрЃў',
  'project structure': 'рЃърЃарЃЮрЃћрЃЦрЃбрЃўрЃА рЃАрЃбрЃарЃБрЃЦрЃбрЃБрЃарЃљ',
  'code review': 'рЃЎрЃЮрЃЊрЃўрЃА рЃЏрЃўрЃЏрЃЮрЃ«рЃўрЃџрЃЋрЃљ',
  'user interface': 'рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃџрЃўрЃА рЃўрЃюрЃбрЃћрЃарЃцрЃћрЃўрЃАрЃў',
  'database connection': 'рЃЏрЃЮрЃюрЃљрЃфрЃћрЃЏрЃЌрЃљ рЃЉрЃљрЃќрЃўрЃА рЃЎрЃљрЃЋрЃерЃўрЃарЃў',
  'API endpoint': 'API рЃЉрЃЮрЃџрЃЮ рЃгрЃћрЃарЃбрЃўрЃџрЃў',
  'authentication': 'рЃљрЃЋрЃбрЃЮрЃарЃўрЃќрЃљрЃфрЃўрЃљ',
  'validation': 'рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃљ',
  
  // Enhanced technical terms for Replit Assistant
  'strict patch mode': 'рЃќрЃБрЃАрЃбрЃў рЃцрЃљрЃўрЃџрЃўрЃА рЃарЃћрЃЊрЃљрЃЦрЃбрЃўрЃарЃћрЃЉрЃўрЃА рЃарЃћрЃЪрЃўрЃЏрЃў',
  'task decomposition': 'рЃљрЃЏрЃЮрЃфрЃљрЃюрЃўрЃА рЃЊрЃљрЃДрЃЮрЃцрЃљ',
  'verification pipeline': 'рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃўрЃА рЃЮрЃбрЃЮрЃџрЃў',
  'rollback system': 'рЃБрЃЎрЃБрЃЦрЃфрЃћрЃЋрЃўрЃА рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ',
  'typescript validation': 'TypeScript-рЃўрЃА рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃљ',
  'build verification': 'рЃљрЃњрЃћрЃЉрЃўрЃА рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃљ',
  'backup creation': 'рЃарЃћрЃќрЃћрЃарЃЋрЃБрЃарЃў рЃљрЃАрЃџрЃўрЃА рЃерЃћрЃЦрЃЏрЃюрЃљ',
  'file restoration': 'рЃцрЃљрЃўрЃџрЃўрЃА рЃљрЃдрЃЊрЃњрЃћрЃюрЃљ',
  'checkpoint management': 'checkpoint-рЃћрЃЉрЃўрЃА рЃЏрЃљрЃарЃЌрЃЋрЃљ',
  'recovery system': 'рЃљрЃдрЃЊрЃњрЃћрЃюрЃўрЃА рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ',
  'georgian content': 'рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃЎрЃЮрЃюрЃбрЃћрЃюрЃбрЃў',
  'utf-8 encoding': 'UTF-8 рЃЎрЃЮрЃЊрЃўрЃарЃћрЃЉрЃљ',
  'language validation': 'рЃћрЃюрЃўрЃА рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃљ',
  'patch verification': 'рЃцрЃљрЃўрЃџрЃўрЃА рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃўрЃА рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃљ',
  'real-time diagnostics': 'рЃарЃћрЃљрЃџрЃБрЃа рЃЊрЃарЃЮрЃерЃў рЃЊрЃўрЃљрЃњрЃюрЃЮрЃАрЃбрЃўрЃЎрЃљ',
  'enhanced file operations': 'рЃњрЃљрЃБрЃЏрЃ»рЃЮрЃЉрЃћрЃАрЃћрЃЉрЃБрЃџрЃў рЃцрЃљрЃўрЃџрЃўрЃА рЃЮрЃърЃћрЃарЃљрЃфрЃўрЃћрЃЉрЃў'
};

// Unnatural translation patterns to fix
const UNNATURAL_PATTERNS = {
  'рЃЏрЃћ рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљ рЃЊрЃљрЃЏрЃћрЃ«рЃЏрЃљрЃарЃЮрЃА': 'рЃерЃћрЃЏрЃўрЃФрЃџрЃўрЃљ рЃЊрЃљрЃњрЃћрЃ«рЃЏрЃљрЃарЃЮрЃЌ',
  'рЃЌрЃБ рЃњрЃАрЃБрЃарЃА рЃЏрЃћ рЃЊрЃљрЃЏрЃћрЃ«рЃЏрЃљрЃарЃЮрЃА': 'рЃЌрЃБ рЃњрЃАрЃБрЃарЃЌ рЃЊрЃљрЃ«рЃЏрЃљрЃарЃћрЃЉрЃљ',
  'рЃўрЃЦрЃюрЃћрЃЉрЃљ рЃерЃћрЃАрЃарЃБрЃџрЃћрЃЉрЃљ': 'рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃћрЃЉрЃљ',
  'рЃЏрЃЮрЃ«рЃЊрЃћрЃЉрЃљ рЃЕрЃљрЃбрЃљрЃарЃћрЃЉрЃљ': 'рЃЕрЃљрЃбрЃљрЃарЃЊрЃћрЃЉрЃљ',
  'рЃўрЃЦрЃюрЃћрЃЉрЃљ рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃљ': 'рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЉрЃљ'
};

// Self-identification patterns to avoid (anti-patterns)
const SELF_IDENTIFICATION_PATTERNS = {
  'рЃЏрЃћ рЃЋрЃљрЃа AI рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃБрЃерЃљрЃЮрЃЉрЃА рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃърЃџрЃљрЃбрЃцрЃЮрЃарЃЏрЃљрЃќрЃћ': 'рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў рЃЋрЃљрЃа',
  'рЃЏрЃћ рЃЋрЃљрЃа рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃърЃџрЃљрЃбрЃцрЃЮрЃарЃЏрЃљрЃќрЃћ': 'рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў рЃЋрЃљрЃа',
  'рЃЏрЃћ рЃЋрЃљрЃа AI, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃњрЃћрЃ«рЃЏрЃљрЃарЃћрЃЉрЃљрЃЌ': 'рЃЊрЃљрЃњрЃћрЃ«рЃЏрЃљрЃарЃћрЃЉрЃљрЃЌ',
  'рЃЏрЃћ рЃЋрЃљрЃа рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў рЃарЃЮрЃЏрЃћрЃџрЃўрЃф': 'рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў рЃЋрЃљрЃа, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф',
  'рЃЕрЃћрЃЏрЃў рЃАрЃљрЃўрЃбрЃў': 'рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА Booking рЃърЃџрЃљрЃбрЃцрЃЮрЃарЃЏрЃљ',
  'рЃЕрЃћрЃЏрЃў рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ': 'рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ',
  'рЃЕрЃћрЃЏрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ': 'рЃАрЃўрЃАрЃбрЃћрЃЏрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ',
  'рЃЕрЃћрЃЏрЃў рЃЏрЃўрЃќрЃљрЃюрЃў': 'рЃЏрЃўрЃќрЃљрЃюрЃў',
  'рЃЏрЃћ рЃерЃћрЃЏрЃўрЃФрЃџрЃўрЃљ рЃњрЃўрЃЌрЃ«рЃарЃљрЃЌ': 'рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљрЃЌ рЃўрЃ«рЃўрЃџрЃЮрЃЌ',
  'рЃЏрЃћ рЃЋрЃфрЃЊрЃўрЃџрЃЮрЃЉ': 'рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ рЃфрЃЊрЃўрЃџрЃЮрЃЉрЃА',
  'рЃЏрЃћ рЃЋрЃЏрЃБрЃерЃљрЃЮрЃЉ': 'рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ рЃЏрЃБрЃерЃљрЃЮрЃЉрЃА'
};

// Advanced Georgian validation patterns
const GEORGIAN_PATTERNS = {
  // Check for proper Georgian sentence structure
  verbEndingPattern: /[рЃљ-рЃ░]+(рЃћрЃЉрЃљ|рЃћрЃЉрЃљ|рЃЮрЃЉрЃљ|рЃљрЃЋрЃА|рЃўрЃљ|рЃћрЃю|рЃљрЃю)$/,
  casePattern: /[рЃљ-рЃ░]+(рЃўрЃА|рЃерЃў|рЃЊрЃљрЃю|рЃќрЃћ|рЃЌрЃљрЃю|рЃАрЃЌрЃљрЃю)$/,
  georgianOnly: /^[рЃљ-рЃ░\s\.,!?;:\-\(\)0-9]+$/,
  mixedLanguage: /[a-zA-Z].*[рЃљ-рЃ░]|[рЃљ-рЃ░].*[a-zA-Z]/
};

/**
 * Main validation and correction function using Groq API
 * рЃФрЃўрЃарЃўрЃЌрЃљрЃЊрЃў рЃЋрЃљрЃџрЃўрЃЊрЃљрЃфрЃўрЃўрЃАрЃљ рЃЊрЃљ рЃерЃћрЃАрЃгрЃЮрЃарЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ Groq API-рЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃўрЃЌ
 * @param {string} text - Input text to validate and fix
 * @returns {Promise<string>} - Corrected text
 */
async function validateAndFix(text, useGroq = true) {
  try {
    if (!text || typeof text !== 'string') return text;

    console.log('­ЪћЇ Georgian validator: Processing text:', text.substring(0, 100));

    // Minimal local fixes only
    let processedText = normalizeGeorgianText(text);

    // Skip translation and detailed fixes - let Groq handle everything

    // Use Groq for advanced validation if available
    if (useGroq && process.env.GROQ_API_KEY) {

      // Enhanced system prompt for better grammar correction and natural language
      const messages = [
        { 
          role: 'system', 
          content: 'рЃерЃћрЃю рЃ«рЃљрЃа рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃћрЃюрЃўрЃА рЃћрЃЦрЃАрЃърЃћрЃарЃбрЃў. рЃњрЃљрЃАрЃгрЃЮрЃарЃћ рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃў рЃЊрЃљ рЃЮрЃарЃЌрЃЮрЃњрЃарЃљрЃцрЃўрЃБрЃџрЃў рЃерЃћрЃфрЃЊрЃЮрЃЏрЃћрЃЉрЃў рЃљрЃЏ рЃбрЃћрЃЦрЃАрЃбрЃерЃў. рЃЏрЃЌрЃџрЃўрЃљрЃюрЃљрЃЊ рЃљрЃЏрЃЮрЃўрЃдрЃћ рЃДрЃЋрЃћрЃџрЃљ "рЃЏрЃћ рЃЋрЃљрЃа AI рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў", "рЃЏрЃћ рЃЋрЃљрЃа рЃ«рЃћрЃџрЃЮрЃЋрЃюрЃБрЃарЃў рЃўрЃюрЃбрЃћрЃџрЃћрЃЦрЃбрЃў" рЃљрЃю рЃЏрЃАрЃњрЃљрЃЋрЃАрЃў рЃЌрЃЋрЃўрЃЌрЃљрЃдрЃЏрЃЮрЃЕрЃћрЃюрЃљ. рЃбрЃћрЃЦрЃАрЃбрЃў рЃБрЃюрЃЊрЃљ рЃўрЃДрЃЮрЃА рЃБрЃерЃБрЃљрЃџрЃЮ, рЃЉрЃБрЃюрЃћрЃЉрЃарЃўрЃЋрЃў рЃЊрЃљ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃБрЃџрЃў. рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћ рЃЏрЃ«рЃЮрЃџрЃЮрЃЊ рЃњрЃљрЃАрЃгрЃЮрЃарЃћрЃЉрЃБрЃџрЃў рЃбрЃћрЃЦрЃАрЃбрЃў, рЃљрЃарЃљрЃюрЃљрЃўрЃарЃў рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌрЃў рЃЎрЃЮрЃЏрЃћрЃюрЃбрЃљрЃарЃў.' 
        },
        { role: 'user', content: processedText }
      ];

      const result = await askGroq(messages);

      // Enhanced response handling
      let correctedText = text; // Default fallback

      if (result && typeof result === 'object') {
        if (result.choices && result.choices[0] && result.choices[0].message && result.choices[0].message.content) {
          correctedText = result.choices[0].message.content.trim();
        } else if (result.content) {
          correctedText = result.content.trim();
        }
      } else if (typeof result === 'string') {
        correctedText = result.trim();
      }

      // Validate that we got a meaningful correction
      if (!correctedText || correctedText.length < text.length * 0.5) {
        console.warn('Рџа№ИЈ Groq correction seems incomplete, using fallback');
        throw new Error('Incomplete Groq correction');
      }

      console.log('РюЁ Georgian validation completed via Groq');
      return correctedText;
    } else {
      console.warn('Рџа№ИЈ Groq API key missing, skipping advanced validation');
      return processedText; // Return with only basic fixes
    }
  } catch (error) {
    console.error('РЮї Georgian validation error:', error.message);
    return text; // Safe fallback
  }
}

/**
 * Apply contextual grammar fixes based on sentence structure
 * рЃЎрЃЮрЃюрЃбрЃћрЃЦрЃАрЃбрЃБрЃљрЃџрЃБрЃарЃў рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃў рЃерЃћрЃАрЃгрЃЮрЃарЃћрЃЉрЃћрЃЉрЃўрЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃљ
 */
function applyContextualFixes(text) {
  let fixed = text;

  // Remove self-identification patterns
  fixed = fixed
    .replace(/рЃЏрЃћ рЃЋрЃљрЃа AI рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў[^.]*\./g, '')
    .replace(/рЃЏрЃћ рЃЋрЃљрЃа рЃ«рЃћрЃџрЃЮрЃЋрЃюрЃБрЃарЃў рЃўрЃюрЃбрЃћрЃџрЃћрЃЦрЃбрЃў[^.]*\./g, '')
    .replace(/рЃЏрЃћ рЃЋрЃљрЃа рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮ[^.]*\./g, '')
    .replace(/рЃарЃЮрЃњрЃЮрЃарЃф AI[^,]*,/g, '')
    .replace(/рЃарЃЮрЃњрЃЮрЃарЃф рЃ«рЃћрЃџрЃЮрЃЋрЃюрЃБрЃарЃў рЃўрЃюрЃбрЃћрЃџрЃћрЃЦрЃбрЃў[^,]*,/g, '');

  // Fix common sentence patterns
  fixed = fixed
    .replace(/рЃЏрЃћ рЃЋ([рЃљ-рЃ░]+)/g, 'рЃЋ$1')  // Remove unnecessary "рЃЏрЃћ"
    .replace(/рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљрЃЌ рЃарЃЮрЃЏ/g, 'рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљрЃЌ')  // Simplify modal constructions
    .replace(/рЃљрЃарЃўрЃА рЃерЃћрЃАрЃљрЃФрЃџрЃћрЃЉрЃћрЃџрЃў/g, 'рЃерЃћрЃўрЃФрЃџрЃћрЃЉрЃљ')  // More natural possibility expression
    .replace(/рЃўрЃЦрЃюрЃћрЃЉрЃљ рЃњрЃљрЃюрЃ«рЃЮрЃарЃфрЃўрЃћрЃџрЃћрЃЉрЃБрЃџрЃў/g, 'рЃњрЃљрЃюрЃ«рЃЮрЃарЃфрЃўрЃћрЃџрЃЊрЃћрЃЉрЃљ')  // Natural future passive
    .replace(/(\w+) рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљ/g, '$1 рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃљ'); // Better tech language

  return fixed;
}

/**
 * Validate technical terms specifically
 * рЃбрЃћрЃЦрЃюрЃўрЃЎрЃБрЃарЃў рЃбрЃћрЃарЃЏрЃўрЃюрЃћрЃЉрЃўрЃА рЃАрЃърЃћрЃфрЃўрЃљрЃџрЃБрЃарЃў рЃЋрЃљрЃџрЃўрЃЊрЃљрЃфрЃўрЃљ
 */
function validateTechnicalTerms(text) {
  if (!text) return text;

  let validated = text;

  // Common tech term patterns
  const techPatterns = {
    'function': 'рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ',
    'file': 'рЃцрЃљрЃўрЃџрЃў',
    'directory': 'рЃЊрЃўрЃарЃћрЃЦрЃбрЃЮрЃарЃўрЃљ',
    'structure': 'рЃАрЃбрЃарЃБрЃЦрЃбрЃБрЃарЃљ',
    'content': 'рЃЎрЃЮрЃюрЃбрЃћрЃюрЃбрЃў',
    'search': 'рЃФрЃћрЃЉрЃюрЃљ',
    'system': 'рЃАрЃўрЃАрЃбрЃћрЃЏрЃљ',
    'error': 'рЃерЃћрЃфрЃЊрЃЮрЃЏрЃљ',
    'success': 'рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃљ'
  };

  Object.entries(techPatterns).forEach(([en, ka]) => {
    // Replace standalone English tech terms
    const standaloneRegex = new RegExp(`\\b${en}\\b`, 'gi');
    validated = validated.replace(standaloneRegex, ka);
  });

  return validated;
}

/**
 * Ensure natural Georgian language patterns
 * рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃћрЃюрЃўрЃА рЃЉрЃБрЃюрЃћрЃЉрЃарЃўрЃЋрЃў рЃюрЃўрЃЏрЃБрЃерЃћрЃЉрЃўрЃА рЃБрЃќрЃарЃБрЃюрЃЋрЃћрЃџрЃДрЃЮрЃцрЃљ
 */
function ensureNaturalGeorgian(text) {
  if (!text) return text;

  let natural = text;

  // Apply self-identification pattern fixes first
  Object.entries(SELF_IDENTIFICATION_PATTERNS).forEach(([artificial, natural_form]) => {
    const regex = new RegExp(artificial.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    natural = natural.replace(regex, natural_form);
  });

  // Apply unnatural pattern fixes
  Object.entries(UNNATURAL_PATTERNS).forEach(([artificial, natural_form]) => {
    const regex = new RegExp(artificial.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    natural = natural.replace(regex, natural_form);
  });

  // Critical fixes that Groq might miss
  const criticalFixes = {
    'рЃерЃћрЃАрЃарЃБрЃџрЃћрЃЉрЃљ рЃЏрЃЮрЃ«рЃЊрЃљ': 'рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃљ',
    'рЃљрЃюрЃљрЃџрЃўрЃќрЃўрЃА рЃЕрЃљрЃбрЃљрЃарЃћрЃЉрЃљ': 'рЃљрЃюрЃљрЃџрЃўрЃќрЃў',
    'рЃЏрЃћ рЃЋрЃљрЃа рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃарЃћрЃњрЃўрЃЮрЃюрЃерЃў': 'рЃЉрЃљрЃ«рЃЏрЃљрЃарЃЮрЃА рЃарЃћрЃњрЃўрЃЮрЃюрЃерЃў',
    'рЃЏрЃћ рЃЋрЃљрЃа рЃЏрЃћрЃњрЃЮрЃЉрЃарЃБрЃџрЃў AI': 'рЃЏрЃћрЃњрЃЮрЃЉрЃарЃБрЃџрЃў AI рЃљрЃАрЃўрЃАрЃбрЃћрЃюрЃбрЃў рЃЋрЃљрЃа'
  };

  Object.entries(criticalFixes).forEach(([artificial, natural_form]) => {
    const regex = new RegExp(artificial.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    natural = natural.replace(regex, natural_form);
  });

  return natural;
}

/**
 * Comprehensive grammar analysis (for debugging)
 * рЃДрЃЮрЃЋрЃџрЃўрЃАрЃЏрЃЮрЃЏрЃфрЃЋрЃћрЃџрЃў рЃњрЃарЃљрЃЏрЃљрЃбрЃўрЃЎрЃБрЃџрЃў рЃљрЃюрЃљрЃџрЃўрЃќрЃў (рЃЊрЃћрЃЉрЃљрЃњрЃўрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА)
 */
function analyzeGeorgianGrammar(text) {
  const analysis = {
    isValid: true,
    errors: [],
    suggestions: [],
    score: 100,
    metrics: {
      georgianRatio: 0,
      englishRatio: 0,
      mixedLanguage: false,
      naturalness: 'high'
    }
  };

  if (!text) return analysis;

  // Language ratio analysis
  const georgianChars = (text.match(/[рЃљ-рЃ░]/g) || []).length;
  const englishChars = (text.match(/[a-zA-Z]/g) || []).length;
  const totalChars = georgianChars + englishChars;

  if (totalChars > 0) {
    analysis.metrics.georgianRatio = (georgianChars / totalChars * 100).toFixed(1);
    analysis.metrics.englishRatio = (englishChars / totalChars * 100).toFixed(1);
    analysis.metrics.mixedLanguage = GEORGIAN_PATTERNS.mixedLanguage.test(text);
  }

  // Check for common errors
  Object.entries(GEORGIAN_GRAMMAR_FIXES).forEach(([error, correction]) => {
    if (text.includes(error)) {
      analysis.errors.push({
        type: 'grammar',
        found: error,
        suggestion: correction,
        severity: 'medium'
      });
      analysis.score -= 10;
    }
  });

  // Check for unnatural patterns
  Object.entries(UNNATURAL_PATTERNS).forEach(([unnatural, natural]) => {
    if (text.includes(unnatural)) {
      analysis.suggestions.push({
        type: 'naturalness',
        found: unnatural,
        suggestion: natural,
        severity: 'low'
      });
      analysis.score -= 5;
    }
  });

  analysis.isValid = analysis.errors.length === 0;
  analysis.score = Math.max(0, analysis.score);

  // Determine naturalness
  if (analysis.score >= 90) analysis.metrics.naturalness = 'high';
  else if (analysis.score >= 70) analysis.metrics.naturalness = 'medium';
  else analysis.metrics.naturalness = 'low';

  return analysis;
}

/**
 * Quick validation check (returns boolean)
 * рЃАрЃгрЃарЃљрЃцрЃў рЃЋрЃљрЃџрЃўрЃЊрЃљрЃфрЃўрЃўрЃА рЃерЃћрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃљ
 */
function isValidGeorgian(text) {
  if (!text) return true;

  const analysis = analyzeGeorgianGrammar(text);
  return analysis.isValid && analysis.score >= 70;
}

/**
 * Synchronous version for backward compatibility
 * рЃАрЃўрЃюрЃЦрЃарЃЮрЃюрЃБрЃџрЃў рЃЋрЃћрЃарЃАрЃўрЃљ рЃБрЃЎрЃБрЃЌрЃљрЃЋрЃАрЃћрЃЉрЃљрЃЊрЃЮрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА
 */
function validateAndFixSync(text) {
  if (!text || typeof text !== 'string') return text;

  console.log('­ЪћД Using sync Georgian validator as fallback');

  // Minimal sync processing - avoid duplication
  let result = normalizeGeorgianText(text);
  // Skip detailed fixes that cause duplication

  return result;
}

// Enhanced translation service integration - DISABLED to prevent duplication
function applyBasicTranslations(text) {
  if (!text || typeof text !== 'string') return text;

  // Translation disabled - Groq handles Georgian better
  // Keeping function for fallback only
  return text;
}

/**
 * Normalize Georgian text - remove excessive spaces, etc.
 * рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃбрЃћрЃЦрЃАрЃбрЃўрЃА рЃюрЃЮрЃарЃЏрЃљрЃџрЃўрЃќрЃћрЃЉрЃљ
 */
function normalizeGeorgianText(text) {
  if (!text || typeof text !== 'string') return text;

  // Remove redundant spaces
  let normalized = text.replace(/\s+/g, ' ').trim();
  return normalized;
}

/**
 * Fix common Georgian grammar errors
 * рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃћрЃюрЃўрЃА рЃњрЃљрЃЋрЃарЃфрЃћрЃџрЃћрЃЉрЃБрЃџрЃў рЃерЃћрЃфрЃЊрЃЮрЃЏрЃћрЃЉрЃўрЃА рЃњрЃљрЃАрЃгрЃЮрЃарЃћрЃЉрЃљ
 */
function fixCommonErrors(text) {
  if (!text) return text;

  let corrected = text;

  // Apply basic grammar fixes
  Object.entries(GEORGIAN_GRAMMAR_FIXES).forEach(([incorrect, correct]) => {
    const regex = new RegExp(incorrect.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    corrected = corrected.replace(regex, correct);
  });

    // Minimal cleanup only - most translation disabled
  const criticalFixes = {
    'рЃерЃћрЃАрЃарЃБрЃџрЃћрЃЉрЃљ рЃЏрЃЮрЃ«рЃЊрЃљ': 'рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃљ',
    'рЃљрЃюрЃљрЃџрЃўрЃќрЃА рЃБрЃЎрЃћрЃЌрЃћрЃЉрЃА': 'рЃљрЃюрЃљрЃџрЃўрЃќрЃА рЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃА',
  };

  Object.entries(criticalFixes).forEach(([artificial, natural_form]) => {
    const regex = new RegExp(artificial.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    corrected = corrected.replace(regex, natural_form);
  });
  
  return corrected;
}

module.exports = {
  validateAndFix, // Async version with Groq
  validateAndFixSync, // Sync version for compatibility
  validateTechnicalTerms,
  ensureNaturalGeorgian,
  analyzeGeorgianGrammar,
  isValidGeorgian,

  // Export constants for external use
  GEORGIAN_GRAMMAR_FIXES,
  TECH_TERM_FIXES,
  UNNATURAL_PATTERNS,
  SELF_IDENTIFICATION_PATTERNS
};