const { getFirestore } = require('firebase-admin/firestore');
const fs = require('fs').promises;
const path = require('path');

let db;
let useLocalStorage = false;

try {
  db = getFirestore();
} catch (error) {
  console.log('üß† Firebase not available for memory extractor, using local file storage');
  useLocalStorage = true;
}

const MEMORY_DIR = path.join(__dirname, '../memory_facts');

async function ensureMemoryDir() {
  try {
    await fs.access(MEMORY_DIR);
  } catch {
    await fs.mkdir(MEMORY_DIR, { recursive: true });
  }
}

async function getUserMemoryFile(userId) {
  await ensureMemoryDir();
  return path.join(MEMORY_DIR, `${userId}.json`);
}

async function readUserFacts(userId) {
  const userFile = await getUserMemoryFile(userId);
  try {
    await fs.access(userFile);
    const data = await fs.readFile(userFile, 'utf8');
    return JSON.parse(data);
  } catch {
    // Create default structure with timestamps
    const defaultData = {
      userId: userId,
      facts: [],
      createdAt: new Date().toISOString(),
      lastUpdated: null,
      totalFacts: 0
    };
    await fs.writeFile(userFile, JSON.stringify(defaultData, null, 2));
    return defaultData;
  }
}

async function writeUserFacts(userId, data) {
  const userFile = await getUserMemoryFile(userId);
  const dataWithTimestamp = {
    ...data,
    lastUpdated: new Date().toISOString(),
    updatedTimestamp: Date.now()
  };
  await fs.writeFile(userFile, JSON.stringify(dataWithTimestamp, null, 2));
}

// ·Éõ·Éê·É†·É¢·Éò·Éï·Éò ·É¢·Éî·É•·É°·É¢·É£·É†·Éò ·Éê·Éõ·Éù·Éõ·É™·Éú·Éù·Éë·Éò - ·É®·Éî·Éò·É´·Éö·Éî·Éë·Éê GPT-·É° ·Éì·Éê·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éò·Éó ·Éí·Éê·É£·Éõ·ÉØ·Éù·Éë·Éî·É°·Éî·Éë·Éê
const extractFacts = (text) => {
  const facts = [];
  const lowerText = text.toLowerCase();

  // ·Éû·Éò·É†·Éê·Éì·Éò ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê
  if (/·Éõ·Éß·Éê·Éï·É°\s+·É´·Éê·É¶·Éö·Éò/i.test(text)) {
    const match = text.match(/·Éõ·Éß·Éê·Éï·É°\s+·É´·Éê·É¶·Éö·Éò\s+([^\s.,!?]+)/i);
    if (match) {
      facts.push(`·Éõ·Éß·Éê·Éï·É° ·É´·Éê·É¶·Éö·Éò ·É°·Éê·ÉÆ·Éî·Éö·Éê·Éì ${match[1]}`);
    } else {
      facts.push('·Éõ·Éß·Éê·Éï·É° ·É´·Éê·É¶·Éö·Éò');
    }
  }

  if (/·Éõ·Éß·Éê·Éï·É°\s+·Éô·Éê·É¢·Éê/i.test(text)) {
    const match = text.match(/·Éõ·Éß·Éê·Éï·É°\s+·Éô·Éê·É¢·Éê\s+([^\s.,!?]+)/i);
    if (match) {
      facts.push(`·Éõ·Éß·Éê·Éï·É° ·Éô·Éê·É¢·Éê ·É°·Éê·ÉÆ·Éî·Éö·Éê·Éì ${match[1]}`);
    } else {
      facts.push('·Éõ·Éß·Éê·Éï·É° ·Éô·Éê·É¢·Éê');
    }
  }

  // ·Éõ·Éì·Éî·Éë·Éê·É†·Éî·Éù·Éë·Éê
  if (/·Éï·É™·ÉÆ·Éù·Éï·É†·Éù·Éë\s+([^.,!?\n]+)/i.test(text)) {
    const match = text.match(/·Éï·É™·ÉÆ·Éù·Éï·É†·Éù·Éë\s+([^.,!?\n]+)/i);
    facts.push(`·É™·ÉÆ·Éù·Éï·É†·Éù·Éë·É°: ${match[1].trim()}`);
  }

  // ·Éù·ÉØ·Éê·ÉÆ·Éò
  if (/·Éõ·Éß·Éê·Éï·É°\s+·É®·Éï·Éò·Éö·Éò/i.test(text)) {
    facts.push('·Éõ·Éß·Éê·Éï·É° ·É®·Éï·Éò·Éö·Éò');
  }

  if (/·Éõ·Éß·Éê·Éï·É°\s+·É™·Éù·Éö·Éò/i.test(text)) {
    facts.push('·Éì·Éê·É•·Éù·É†·É¨·Éò·Éú·Éî·Éë·É£·Éö·Éò·Éê');
  }

  if (/·Éõ·Éß·Éê·Éï·É°\s+·É•·Éõ·Éê·É†·Éò/i.test(text)) {
    facts.push('·Éì·Éê·É•·Éù·É†·É¨·Éò·Éú·Éî·Éë·É£·Éö·Éò·Éê');
  }

  // ·Éû·É†·Éù·É§·Éî·É°·Éò·Éê
  if (/·Éï·Éõ·É£·É®·Éê·Éù·Éë\s+([^.,!?\n]+)/i.test(text)) {
    const match = text.match(/·Éï·Éõ·É£·É®·Éê·Éù·Éë\s+([^.,!?\n]+)/i);
    facts.push(`·Éõ·É£·É®·Éê·Éù·Éë·É°: ${match[1].trim()}`);
  }

  // ·Éê·É°·Éê·Éô·Éò
  if (/(\d+)\s+·É¨·Éö·Éò·É°\s+·Éï·Éê·É†/i.test(text)) {
    const match = text.match(/(\d+)\s+·É¨·Éö·Éò·É°\s+·Éï·Éê·É†/i);
    facts.push(`·Éê·É°·Éê·Éô·Éò: ${match[1]} ·É¨·Éî·Éö·Éò`);
  }

  // ·É∞·Éù·Éë·Éò/·Éò·Éú·É¢·Éî·É†·Éî·É°·Éî·Éë·Éò
  if (/·Éõ·Éò·Éß·Éï·Éê·É†·É°\s+([^.,!?\n]+)/i.test(text)) {
    const match = text.match(/·Éõ·Éò·Éß·Éï·Éê·É†·É°\s+([^.,!?\n]+)/i);
    facts.push(`·Éõ·Éò·Éß·Éï·Éê·É†·É°: ${match[1].trim()}`);
  }

  // ·Éê·Éï·É¢·Éù·Éõ·Éù·Éë·Éò·Éö·Éò
  if (/·Éõ·Éß·Éê·Éï·É°\s+(·Éõ·Éê·Éú·É•·Éê·Éú·Éê|·Éê·Éï·É¢·Éù·Éõ·Éù·Éë·Éò·Éö·Éò)/i.test(text)) {
    facts.push('·Éõ·Éß·Éê·Éï·É° ·Éê·Éï·É¢·Éù·Éõ·Éù·Éë·Éò·Éö·Éò');
  }

  // ·Éí·Éê·Éú·Éê·Éó·Éö·Éî·Éë·Éê
  if (/(·Éì·Éê·Éï·Éê·Éõ·Éó·Éê·Éï·É†·Éî|·Éï·É°·É¨·Éê·Éï·Éö·Éù·Éë)\s+([^\n]+)/i.test(text)) {
    const match = text.match(/(·Éì·Éê·Éï·Éê·Éõ·Éó·Éê·Éï·É†·Éî|·Éï·É°·É¨·Éê·Éï·Éö·Éù·Éë)\s+([^\n]+)/i);
    if(match && match[2]){
      facts.push(`·Éí·Éê·Éú·Éê·Éó·Éö·Éî·Éë·Éê: ${match[2].trim()}`);
    }
  }

  return facts.filter(fact => fact.length > 0 && fact.length < 100); // ·É§·Éò·Éö·É¢·É†·Éê·É™·Éò·Éê ·É´·Éê·Éö·Éò·Éê·Éú ·Éí·É†·É´·Éî·Éö·Éò ·É§·Éê·É•·É¢·Éî·Éë·Éò·É°·Éí·Éê·Éú
};

// Deduplicate facts against existing ones
async function deduplicateFacts(userId, newFacts) {
  try {
    const existingFacts = await getStoredFacts(userId);
    const existingLower = existingFacts.map(fact => fact.toLowerCase().trim());
    
    const uniqueFacts = newFacts.filter(newFact => {
      const newFactLower = newFact.toLowerCase().trim();
      return !existingLower.some(existing => 
        existing === newFactLower || 
        existing.includes(newFactLower) || 
        newFactLower.includes(existing)
      );
    });

    console.log(`üß† Fact deduplication: ${newFacts.length} ‚Üí ${uniqueFacts.length} unique facts`);
    return uniqueFacts;
  } catch (error) {
    console.error('üß† Fact deduplication error:', error);
    return newFacts; // Return original if deduplication fails
  }
}

const storeFacts = async (userId, facts) => {
  if (!facts || facts.length === 0) return [];

  // Validate memory context integrity
  try {
    await validateMemoryContext(userId);
  } catch (error) {
    console.error(`üß† Memory context corruption detected for user ${userId}:`, error);
    await repairMemoryContext(userId);
  }

  // Deduplicate before storing
  const uniqueFacts = await deduplicateFacts(userId, facts);
  if (uniqueFacts.length === 0) {
    console.log(`üß† No new unique facts to store for user ${userId}`);
    return [];
  }

  try {
    if (!useLocalStorage && db) {
      const memoryRef = db.collection('memory').doc(userId);
      const doc = await memoryRef.get();
      const existing = doc.exists ? doc.data() : { facts: [], lastUpdated: null };

      // Use deduplicated facts (already filtered)
      const newFacts = uniqueFacts;

      if (newFacts.length > 0) {
        const updatedData = {
          facts: [...(existing.facts || []), ...newFacts],
          lastUpdated: new Date().toISOString(),
          totalFacts: (existing.facts || []).length + newFacts.length
        };

        await memoryRef.set(updatedData, { merge: true });
        console.log(`üß† Memory updated in Firebase for user ${userId}: ${newFacts.length} new facts stored`);
        return newFacts;
      }
      return [];
    } else {
      // Fallback to local per-user storage
      const existing = await readUserFacts(userId);

      const newFacts = facts.filter(fact => 
        !existing.facts.some(existingFact => 
          existingFact.toLowerCase() === fact.toLowerCase()
        )
      );

      if (newFacts.length > 0) {
        const updatedData = {
          ...existing,
          facts: [...(existing.facts || []), ...newFacts],
          totalFacts: (existing.facts || []).length + newFacts.length
        };

        await writeUserFacts(userId, updatedData);
        console.log(`üß† Memory updated locally for user ${userId}: ${newFacts.length} new facts stored`);
        return newFacts;
      }
      return [];
    }
  } catch (error) {
    console.error('‚ùå Memory storage error:', error);
    
    // Try local per-user storage as fallback
    try {
      const existing = await readUserFacts(userId);

      const newFacts = facts.filter(fact => 
        !existing.facts.some(existingFact => 
          existingFact.toLowerCase() === fact.toLowerCase()
        )
      );

      if (newFacts.length > 0) {
        const updatedData = {
          ...existing,
          facts: [...(existing.facts || []), ...newFacts],
          totalFacts: (existing.facts || []).length + newFacts.length
        };

        await writeUserFacts(userId, updatedData);
        console.log(`üß† Memory updated locally (fallback) for user ${userId}: ${newFacts.length} new facts stored`);
        return newFacts;
      }
      return [];
    } catch (fallbackError) {
      console.error('‚ùå Local memory fallback failed:', fallbackError);
      return [];
    }
  }
};

const getStoredFacts = async (userId) => {
  try {
    if (!useLocalStorage && db) {
      const memoryRef = db.collection('memory').doc(userId);
      const doc = await memoryRef.get();

      if (doc.exists) {
        const data = doc.data();
        console.log(`üß† Facts retrieved from Firebase for user ${userId}`);
        return data.facts || [];
      }
      return [];
    } else {
      // Fallback to local per-user storage
      const userData = await readUserFacts(userId);
      if (userData && userData.facts) {
        console.log(`üß† Facts retrieved locally for user ${userId}:`, {
          totalFacts: userData.totalFacts,
          lastUpdated: userData.lastUpdated
        });
        return userData.facts || [];
      }
      return [];
    }
  } catch (error) {
    console.error('‚ùå Memory retrieval error:', error);
    
    // Try local per-user storage as fallback
    try {
      const userData = await readUserFacts(userId);
      if (userData && userData.facts) {
        console.log(`üß† Facts retrieved locally (fallback) for user ${userId}:`, {
          totalFacts: userData.totalFacts,
          lastUpdated: userData.lastUpdated
        });
        return userData.facts || [];
      }
      return [];
    } catch (fallbackError) {
      console.error('‚ùå Local memory fallback failed:', fallbackError);
      return [];
    }
  }
};

// Validate memory context integrity
async function validateMemoryContext(userId) {
  try {
    const userData = await readUserFacts(userId);
    
    // Check for corrupted data structure
    if (!userData || typeof userData !== 'object') {
      throw new Error('Invalid memory data structure');
    }
    
    // Validate required fields
    if (!Array.isArray(userData.facts)) {
      throw new Error('Facts array is corrupted');
    }
    
    // Check for circular references or malformed facts
    userData.facts.forEach((fact, index) => {
      if (typeof fact !== 'string' || fact.length === 0) {
        throw new Error(`Corrupted fact at index ${index}`);
      }
    });
    
    console.log(`üß† Memory context validation passed for user ${userId}`);
    return true;
  } catch (error) {
    console.error(`üß† Memory context validation failed for user ${userId}:`, error);
    throw error;
  }
}

// Repair corrupted memory context
async function repairMemoryContext(userId) {
  try {
    console.log(`üîß Attempting to repair memory context for user ${userId}`);
    
    // Create backup of corrupted data
    const userFile = await getUserMemoryFile(userId);
    const backupFile = `${userFile}.corrupted.${Date.now()}`;
    
    try {
      const corruptedData = await fs.readFile(userFile, 'utf8');
      await fs.writeFile(backupFile, corruptedData);
      console.log(`üîß Corrupted data backed up to ${backupFile}`);
    } catch (backupError) {
      console.warn(`‚ö†Ô∏è Could not backup corrupted data:`, backupError);
    }
    
    // Create clean memory structure
    const cleanData = {
      userId: userId,
      facts: [],
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      totalFacts: 0,
      repaired: true,
      repairedAt: new Date().toISOString()
    };
    
    await writeUserFacts(userId, cleanData);
    console.log(`‚úÖ Memory context repaired for user ${userId}`);
    
    return cleanData;
  } catch (error) {
    console.error(`‚ùå Memory context repair failed for user ${userId}:`, error);
    throw error;
  }
}

module.exports = {
  extractFacts,
  storeFacts,
  getStoredFacts,
  deduplicateFacts,
  validateMemoryContext,
  repairMemoryContext
};