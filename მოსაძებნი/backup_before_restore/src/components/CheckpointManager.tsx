import React, { useState } from 'react';
import { 
  Save, RotateCcw, Clock, Trash2, Settings, 
  Calendar, User, FileText, Info, Archive
} from 'lucide-react';

// ===== INTERFACES =====
export interface Checkpoint {
  id: string;
  name: string;
  description: string;
  timestamp: Date;
  sessionId: string;
  messages: Array<{
    id: string;
    type: "user" | "ai";
    content: string;
    timestamp: string;
  }>;
  metadata: {
    userTriggered: boolean;
    autoGenerated: boolean;
    version: string;
    context: string[];
  };
}

interface CheckpointManagerProps {
  checkpoints: Checkpoint[];
  currentSessionId: string | null;
  checkpointName: string;
  setCheckpointName: React.Dispatch<React.SetStateAction<string>>;
  autoCheckpointEnabled: boolean;
  setAutoCheckpointEnabled: React.Dispatch<React.SetStateAction<boolean>>;
  lastCheckpointTime: Date | null;
  onCreateCheckpoint: () => void;
  onRollbackToCheckpoint: (checkpointId: string) => void;
  onDeleteCheckpoint: (checkpointId: string) => void;
  messageCount: number;
  fileContext: string[];
}

export default function CheckpointManager({
  checkpoints,
  currentSessionId,
  checkpointName,
  setCheckpointName,
  autoCheckpointEnabled,
  setAutoCheckpointEnabled,
  lastCheckpointTime,
  onCreateCheckpoint,
  onRollbackToCheckpoint,
  onDeleteCheckpoint,
  messageCount,
  fileContext
}: CheckpointManagerProps) {
  // ===== LOCAL STATE =====
  const [sortBy, setSortBy] = useState<'timestamp' | 'name' | 'messages'>('timestamp');
  const [showAutoSettings, setShowAutoSettings] = useState(false);
  const [selectedCheckpoint, setSelectedCheckpoint] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('list');

  // ===== COMPUTED VALUES =====
  const sessionCheckpoints = currentSessionId 
    ? checkpoints.filter(cp => cp.sessionId === currentSessionId)
    : [];

  const sortedCheckpoints = [...sessionCheckpoints].sort((a, b) => {
    switch (sortBy) {
      case 'name':
        return a.name.localeCompare(b.name);
      case 'messages':
        return b.messages.length - a.messages.length;
      case 'timestamp':
      default:
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
    }
  });

  const autoCheckpoints = sessionCheckpoints.filter(cp => cp.metadata.autoGenerated);
  const manualCheckpoints = sessionCheckpoints.filter(cp => cp.metadata.userTriggered);

  // ===== TIME CALCULATIONS =====
  const getTimeSinceLastCheckpoint = (): string => {
    if (!lastCheckpointTime) return 'არასდროს';
    
    const now = new Date();
    const diffMs = now.getTime() - lastCheckpointTime.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMinutes / 60);
    
    if (diffMinutes < 1) return 'ახლახან';
    if (diffMinutes < 60) return `${diffMinutes} წუთის წინ`;
    if (diffHours < 24) return `${diffHours} საათის წინ`;
    
    return lastCheckpointTime.toLocaleDateString('ka-GE');
  };

  const formatTimestamp = (timestamp: Date): string => {
    return new Intl.DateTimeFormat('ka-GE', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(timestamp);
  };

  // ===== RENDER HELPERS =====
  const CheckpointCard = ({ checkpoint }: { checkpoint: Checkpoint }) => (
    <div
      className={`
        relative p-4 rounded-lg border-2 transition-all duration-200 hover:shadow-lg cursor-pointer
        ${selectedCheckpoint === checkpoint.id 
          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
        }
      `}
      onClick={() => setSelectedCheckpoint(
        selectedCheckpoint === checkpoint.id ? null : checkpoint.id
      )}
    >
      {/* Header */}
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-2">
          {checkpoint.metadata.userTriggered ? (
            <User className="w-4 h-4 text-blue-500" />
          ) : (
            <Clock className="w-4 h-4 text-green-500" />
          )}
          <h4 className="font-semibold text-gray-900 dark:text-gray-100 truncate">
            {checkpoint.name}
          </h4>
        </div>
        
        <div className="flex items-center gap-1">
          <span className="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
            {checkpoint.messages.length} msg
          </span>
        </div>
      </div>

      {/* Description */}
      <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">
        {checkpoint.description}
      </p>

      {/* Metadata */}
      <div className="flex items-center justify-between text-xs text-gray-500">
        <span className="flex items-center gap-1">
          <Calendar className="w-3 h-3" />
          {formatTimestamp(checkpoint.timestamp)}
        </span>
        
        {checkpoint.metadata.context.length > 0 && (
          <span className="flex items-center gap-1">
            <FileText className="w-3 h-3" />
            {checkpoint.metadata.context.length} files
          </span>
        )}
      </div>

      {/* Actions - Show on selection */}
      {selectedCheckpoint === checkpoint.id && (
        <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600 flex items-center gap-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onRollbackToCheckpoint(checkpoint.id);
            }}
            className="flex-1 flex items-center justify-center gap-1 px-3 py-1.5 bg-blue-500 text-white rounded text-xs hover:bg-blue-600 transition-colors"
          >
            <RotateCcw className="w-3 h-3" />
            დაბრუნება
          </button>
          
          <button
            onClick={(e) => {
              e.stopPropagation();
              onDeleteCheckpoint(checkpoint.id);
            }}
            className="flex items-center justify-center gap-1 px-3 py-1.5 bg-red-500 text-white rounded text-xs hover:bg-red-600 transition-colors"
          >
            <Trash2 className="w-3 h-3" />
          </button>
        </div>
      )}
    </div>
  );

  // ===== MAIN RENDER =====
  return (
    <div className="w-full max-w-4xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-2">
            <Save className="w-6 h-6 text-blue-500" />
            Checkpoint Manager
          </h2>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            ჩატის მდგომარეობის შენახვა და აღდგენა
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <button
            onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
            className="px-3 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
          >
            {viewMode === 'grid' ? 'List' : 'Grid'}
          </button>
          
          <button
            onClick={() => setShowAutoSettings(!showAutoSettings)}
            className="p-2 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
          >
            <Settings className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Stats Bar */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-1">
            <Save className="w-4 h-4 text-blue-500" />
            <span className="text-sm text-blue-700 dark:text-blue-300">სულ Checkpoints</span>
          </div>
          <div className="text-2xl font-bold text-blue-600">{sessionCheckpoints.length}</div>
        </div>
        
        <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-1">
            <Clock className="w-4 h-4 text-green-500" />
            <span className="text-sm text-green-700 dark:text-green-300">ავტომატური</span>
          </div>
          <div className="text-2xl font-bold text-green-600">{autoCheckpoints.length}</div>
        </div>
        
        <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-1">
            <User className="w-4 h-4 text-purple-500" />
            <span className="text-sm text-purple-700 dark:text-purple-300">მანუალური</span>
          </div>
          <div className="text-2xl font-bold text-purple-600">{manualCheckpoints.length}</div>
        </div>
        
        <div className="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-1">
            <Clock className="w-4 h-4 text-orange-500" />
            <span className="text-sm text-orange-700 dark:text-orange-300">ბოლო</span>
          </div>
          <div className="text-sm font-bold text-orange-600">{getTimeSinceLastCheckpoint()}</div>
        </div>
      </div>

      {/* Auto Settings Panel */}
      {showAutoSettings && (
        <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border">
          <h3 className="font-semibold mb-3 flex items-center gap-2">
            <Settings className="w-4 h-4" />
            ავტომატური Checkpoint პარამეტრები
          </h3>
          
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <label className="text-sm text-gray-700 dark:text-gray-300">
                ავტომატური შექმნა
              </label>
              <button
                onClick={() => setAutoCheckpointEnabled(!autoCheckpointEnabled)}
                className={`
                  relative inline-flex h-6 w-11 items-center rounded-full transition-colors
                  ${autoCheckpointEnabled ? 'bg-blue-600' : 'bg-gray-300'}
                `}
              >
                <span
                  className={`
                    inline-block h-4 w-4 transform rounded-full bg-white transition-transform
                    ${autoCheckpointEnabled ? 'translate-x-6' : 'translate-x-1'}
                  `}
                />
              </button>
            </div>
            
            <div className="text-xs text-gray-500 bg-blue-50 dark:bg-blue-900/20 p-3 rounded border-l-4 border-blue-500">
              <Info className="w-4 h-4 inline mr-1" />
              ავტომატური checkpoint-ები იქმნება ყოველ 10 message-ზე ან მნიშვნელოვან ცვლილებებზე
            </div>
          </div>
        </div>
      )}

      {/* Manual Checkpoint Creation */}
      <div className="bg-white dark:bg-gray-900 p-4 rounded-lg border">
        <h3 className="font-semibold mb-3 flex items-center gap-2">
          <User className="w-4 h-4 text-blue-500" />
          ახალი Checkpoint-ის შექმნა
        </h3>
        
        <div className="flex gap-3">
          <input
            type="text"
            value={checkpointName}
            onChange={(e) => setCheckpointName(e.target.value)}
            placeholder="Checkpoint-ის სახელი..."
            className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800"
          />
          <button
            onClick={onCreateCheckpoint}
            disabled={!checkpointName.trim() || !currentSessionId}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            შექმნა
          </button>
        </div>
        
        <div className="mt-3 text-sm text-gray-600 dark:text-gray-400 flex items-center gap-4">
          <span>მიმდინარე: {messageCount} message</span>
          <span>•</span>
          <span>კონტექსტი: {fileContext.length} file</span>
        </div>
      </div>

      {/* Sorting Controls */}
      {sessionCheckpoints.length > 0 && (
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-600 dark:text-gray-400">დალაგება:</span>
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as 'timestamp' | 'name' | 'messages')}
              className="px-3 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800"
            >
              <option value="timestamp">თარიღით</option>
              <option value="name">სახელით</option>
              <option value="messages">Message რაოდენობით</option>
            </select>
          </div>
          
          <span className="text-sm text-gray-500">
            სულ: {sessionCheckpoints.length} checkpoint
          </span>
        </div>
      )}

      {/* Checkpoints List/Grid */}
      {sessionCheckpoints.length === 0 ? (
        <div className="text-center py-12">
          <Archive className="w-16 h-16 text-gray-300 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-600 dark:text-gray-400 mb-2">
            Checkpoint-ები არ არის
          </h3>
          <p className="text-sm text-gray-500">
            შექმენით პირველი checkpoint ზემოთ მოცემული ფორმით
          </p>
        </div>
      ) : (
        <div className={`
          ${viewMode === 'grid' 
            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' 
            : 'space-y-3'
          }
        `}>
          {sortedCheckpoints.map((checkpoint) => (
            <CheckpointCard key={checkpoint.id} checkpoint={checkpoint} />
          ))}
        </div>
      )}

      {/* Info Footer */}
      <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border-l-4 border-blue-500">
        <div className="flex items-start gap-2">
          <Info className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
          <div className="text-sm text-blue-700 dark:text-blue-300">
            <strong>რჩევა:</strong> Checkpoint-ები საშუალებას გაძლევთ დაბრუნდეთ ჩატის წინა მდგომარეობაზე. 
            გამოიყენეთ მნიშვნელოვანი ცვლილებების დაფიქსირებისთვის.
          </div>
        </div>
      </div>
    </div>
  );
}